// Generated by CoffeeScript 1.4.0

/*
Test suite for node AND browser in one file
So, we are need some data from global
Its so wrong, but its OK for test
*/


(function() {
  var TinyData, lib_path;

  lib_path = (typeof GLOBAL !== "undefined" && GLOBAL !== null ? GLOBAL.lib_path : void 0) || '';

  TinyData = require("" + lib_path + "tinydata");

  describe('TinyData:', function() {
    var first_object, first_object_secondary_index, first_object_stringify, object_td, second_object, second_object_rpath, second_object_rpath_two, second_object_secondary_index, second_object_secondary_index_two, second_object_stringify, third_object, third_object_rpath, third_object_secondary_index;
    object_td = null;
    first_object = {
      firs: 'one',
      second: 'two',
      third: 'three'
    };
    first_object_stringify = ['firs.one', 'second.two', 'third.three'];
    first_object_secondary_index = {
      one: ['firs'],
      two: ['second'],
      three: ['third']
    };
    second_object_rpath = '^((?:[^.]+\\.){2})([^.]+)$';
    second_object = {
      first: ['one', 'two', 'three'],
      second: ['four', 'five'],
      third: ['six', ['seven']]
    };
    second_object_stringify = ['first.0.one', 'first.1.two', 'first.2.three', 'second.0.four', 'second.1.five', 'third.0.six', 'third.1.0.seven'];
    second_object_secondary_index = {
      one: ['first.0'],
      two: ['first.1'],
      three: ['first.2'],
      four: ['second.0'],
      five: ['second.1'],
      six: ['third.0']
    };
    second_object_rpath_two = '^((?:[^.]+\\.){3})([^.]+)$';
    second_object_secondary_index_two = {
      seven: ['third.1.0']
    };
    third_object_rpath = '^((?:[^.]+\\.){2})([^.]+)$';
    third_object = {
      first: ['one', 'two', 'three'],
      second: ['one', 'two', 'four'],
      third: ['six', 'three']
    };
    third_object_secondary_index = {
      one: ['first.0', 'second.0'],
      two: ['first.1', 'second.1'],
      three: ['first.2', 'third.1'],
      four: ['second.2'],
      six: ['third.0']
    };
    beforeEach(function() {
      return object_td = new TinyData();
    });
    describe('new()', function() {
      it('should return TinyData object', function() {
        return object_td.should.be.an["instanceof"](TinyData);
      });
      return it('should construct and build secondary index at init', function() {
        var local_object;
        local_object = new TinyData(second_object, second_object_rpath);
        return local_object.getOriginFor('three').should.be.a.eql(second_object_secondary_index.three);
      });
    });
    describe('#setOriginalObject()', function() {
      it('should setup object and return self', function() {
        return object_td.setOriginalObject(first_object).should.be.an["instanceof"](TinyData);
      });
      it('should build correct index for for plain object after set', function() {
        object_td.setOriginalObject(first_object);
        return object_td.getSecondaryIndex().should.be.a.eql(first_object_secondary_index);
      });
      it('should build correct index for for deep object', function() {
        object_td.setOriginalObject(second_object).setRpath(second_object_rpath);
        return object_td.getSecondaryIndex().should.be.a.eql(second_object_secondary_index);
      });
      return it('should build correct index for for doubled-value object', function() {
        object_td.setOriginalObject(first_object);
        object_td.setOriginalObject(third_object).setRpath(third_object_rpath);
        return object_td.getSecondaryIndex().should.be.a.eql(third_object_secondary_index);
      });
    });
    describe('#getOriginalObject()', function() {
      return it('should return original object', function() {
        object_td.setOriginalObject(first_object);
        return object_td.getOriginalObject().should.be.a.equal(first_object);
      });
    });
    describe('#setRpath()', function() {
      it('should setup Rpath and return self', function() {
        return object_td.setRpath(second_object_rpath).should.be.an["instanceof"](TinyData);
      });
      return it('should rebuild secondary index on untouched stringifyed results', function() {
        var local_object;
        local_object = new TinyData(second_object, second_object_rpath);
        local_object.setRpath(second_object_rpath_two);
        return local_object.getSecondaryIndex().should.be.a.eql(second_object_secondary_index_two);
      });
    });
    describe('#getRpath()', function() {
      return it('should return original string', function() {
        object_td.setRpath(second_object_rpath);
        return object_td.getRpath().should.be.a.equal(second_object_rpath);
      });
    });
    describe('#getSecondaryIndex()', function() {
      it('should return empty index for empty object', function() {
        return object_td.getSecondaryIndex().should.be.a.eql({});
      });
      it('should return correct value for plain object', function() {
        object_td.setOriginalObject(first_object);
        return object_td.getSecondaryIndex().should.be.a.eql(first_object_secondary_index);
      });
      return it('should return correct value for deep object', function() {
        object_td.setOriginalObject(second_object).setRpath(second_object_rpath);
        return object_td.getSecondaryIndex().should.be.a.eql(second_object_secondary_index);
      });
    });
    describe('#getStringifyedObject()', function() {
      it('should return empty array on empty object', function() {
        return object_td.getStringifyedObject().should.be.a.eql([]);
      });
      it('should return correct value for plain object', function() {
        object_td.setOriginalObject(first_object);
        return object_td.getStringifyedObject().should.be.a.eql(first_object_stringify);
      });
      return it('should return correct value for deep object', function() {
        object_td.setOriginalObject(second_object);
        return object_td.getStringifyedObject().should.be.a.eql(second_object_stringify);
      });
    });
    return describe('#getOriginFor()', function() {
      it('should return undef on empty object', function() {
        return expect(object_td.getOriginFor('foo')).to.be.undefined;
      });
      it('should return correct value for plain object', function() {
        object_td.setOriginalObject(first_object);
        return object_td.getOriginFor('two').should.be.a.eql(first_object_secondary_index.two);
      });
      it('should return correct value for deep object', function() {
        object_td.setOriginalObject(second_object).setRpath(second_object_rpath);
        return object_td.getOriginFor('three').should.be.a.eql(second_object_secondary_index.three);
      });
      return it('should return correct value for doubled-value object', function() {
        object_td.setOriginalObject(third_object).setRpath(third_object_rpath);
        return object_td.getOriginFor('three').should.be.a.eql(third_object_secondary_index.three);
      });
    });
  });

}).call(this);
