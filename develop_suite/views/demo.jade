extends includes/layout

block content

  // only head.js needed at first
  script(src='vendor/head.load-0.99.min.js')

  //head.js loader
  :coffeescript
    head.js "vendor/lodash-1.0.0-rc.1.min.js",
    { tinydata : "js/tinydata.js" }

  :coffeescript

    head.ready "tinydata", ->
      $ -> 
        ###
        This is second example code
        ###

        post_template = _.template """
          <strong>Title:</strong>  <span><%= post_data.title %></span></br>
          <strong>Author:</strong>  <span><%= post_data.author.name %></span></br>
          <strong>Text:</strong>  <span><%= post_data.text %></span></br>
          <span class="btn btn-primary btn-small <%= comment_num ? 'active': 'disabled' %>" data-toggle="collapse" data-target="#comments_to_<%= post_idx %>">Comments (<%= comment_num %>):<span></br>
          """
  
        comment_template = _.template """
          <div class="span5 offset<%= comment_shift %> well">
          <strong>Author:</strong>  <span><%= comment_data.author.name %></span></br>
          <strong>Text:</strong>  <span><%= comment_data.text %></span></br>
          </div>
          """

        ###
        tiny helper, will be included in TinyData
        ###
        get_by_path = (obj, path) ->
          steps = path.split('.')
          _.reduce steps, ((obj, i) -> obj[i]), obj

        show_blog_example = (in_data, processed_data) ->
          main_container = $('<div>')
          _.each in_data, (post_prop, post_idx) ->

            post_object = 
              post_idx : post_idx
              post_data : in_data[post_idx]
              comment_num : processed_data[post_idx]?.length

            # to setup all undefined values at one place
            _.defaults post_object, 
              comment_num : 0

            post = $("<div class='span8 well'>")
              .html(post_template post_object)
              .appendTo main_container
        
            comment_container = $("<div class='span10 collapse' id='comments_to_#{post_idx}'>")
              .appendTo post

            _.each processed_data[post_idx], (comment_path) ->

              comment_shift = (comment_path.split('.').length - 3)/2

              comment_object = 
                comment_data : get_by_path in_data, comment_path
                comment_shift : comment_shift

              comment =  $("<div class='row'>")
                .html(comment_template comment_object)
                .appendTo comment_container

          main_container.appendTo $('.blog_examlpe')

        code_example_2 = (in_data) ->

          TinyData = require 'tinydata'
          object_td = new TinyData in_data, debug : yes
          post_with_comments_rule = /^((\d+)\.comments\.\d+\.(?:comments\.\d+\.)*)_id/
          post_with_comments = object_td.seekOutVerso post_with_comments_rule
          show_blog_example in_data, post_with_comments
          null

        $.getJSON "example/blog_example_data.json", code_example_2


  div.container
    h1 TinyData Live Demo

    div.span8
      span.label.label-important Внимание!
      div.well
        p Смертельный номер, работа без каната!
        em Ну ну дизайнер я, чувство прекрасного меня ненавидит :)

    div.span8
      p
        | Итого для формирования страницы а-ля блог, 
        | имея на входе только сырые данные а-ля выдача MongoDB,
        | мы использовали
        ul.unstyled
          li 1шт. RegExp (довольно простой и понятный)
          li 2шт. _.each нерекурсивной природы
          li 2шт. _.template
          li 1шт. хелпер, возвращающий объект по dot-нотации
        | 
        | В сумме 46 строк (шаблоны не считаем), с пробелами и нормальным именованием переменных,
        | без гольфизма.

    div.blog_examlpe
















